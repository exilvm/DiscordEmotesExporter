name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
      with:
        ref: master
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U discord.py-self python-slugify pyinstaller
    - name: Create package
      run: |
        pyinstaller --onefile main.py --distpath dist/${{ matrix.os }}
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./dist
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: dist
    - run: |
        parent_directory="./"
        tmpdir=$(mktemp -d)
        for platform_directory in $(ls $parent_directory); do
            platform_path="$parent_directory/$platform_directory"
            if [ -d "$platform_path" ]; then
                platform_name=$(basename "$platform_directory")
                for executable_file in $(ls $platform_path); do
                    executable_name=$(basename "$executable_file")
                    new_executable_name="$platform_name-$executable_name"
                    source_path="$platform_path/$executable_name"
                    destination_path="$tmpdir/$new_executable_name"
                    mv "$source_path" "$destination_path"
                done
            fi
        done
        echo "OUTPUT_DIR=$tmpdir" >> $GITHUB_OUTPUT
      id: organizer
    - name: Create a release
      run: |
        gh release create ${{ inputs.version }} ${{ steps.organizer.outputs.OUTPUT_DIR }}/* --generate-notes -t "Release ${{ inputs.version }}" -R ${{github.repository}}
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE }}
